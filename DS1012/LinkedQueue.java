package DS1012;public class LinkedQueue<T> implements QueueInterface<T> {	private Node<T> firstNode; // references node at front of queue	private Node<T> lastNode; // references node at back of queue	public LinkedQueue() {		firstNode = null;		lastNode = null;	} // end default constructor//  < Implementations of the queue operations go here. >//  . . .	public void enqueue(T newEntry) {		Node<T> newNode = new Node<T>(newEntry, null);		if (isEmpty())			firstNode = newNode;		else			lastNode.setNextNode(newNode);		lastNode = newNode;	} // end enqueue	public T getFront() {		T front = null;		if (!isEmpty())			front = firstNode.getData();		return front;	} // end getFront	public T dequeue() {		T front = null;		if (!isEmpty()) {			front = firstNode.getData();			firstNode = firstNode.getNextNode();			if (firstNode == null)				lastNode = null; // firstNode,lastNode 2개로 돌리기 때문에 해주는 것		} // end if		return front;	} // end dequeue	public boolean isEmpty() {		return (firstNode == null) && (lastNode == null);	} // end isEmpty	public void clear() {		firstNode = null;		lastNode = null;	} // end clear	public static void main(String[] args) {		QueueInterface<String> myQueue = new LinkedQueue<String>();		myQueue.enqueue("Jim");		myQueue.enqueue("Jess");		myQueue.enqueue("Jill");		myQueue.enqueue("Jane");		String name = myQueue.dequeue();		System.out.println("1 name: " + name);		myQueue.enqueue(name);		myQueue.enqueue(myQueue.getFront());		name = myQueue.dequeue();		System.out.println("2 name: " + name);	}} // end LinkedQueue