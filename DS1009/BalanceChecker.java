package DS1009;public class BalanceChecker {	/**	 * Decides whether the parentheses, brackets, and braces in a string occur in	 * left/right pairs.	 *	 * @param expression a string to be checked	 * @return true if the delimiters are paired correctly	 */	public static boolean checkBalance(String expression) {		StackInterface<Character> openDelimiterStack = new ArrayStack<Character>();		int characterCount = expression.length();		boolean isBalanced = true;		int index = 0;		char nextCharacter = ' ';		for (; isBalanced && (index < characterCount); index++) {			nextCharacter = expression.charAt(index);			switch (nextCharacter) {			case '(':			case '[':			case '{':				openDelimiterStack.push(nextCharacter);				break;			case ')':			case ']':			case '}':				if (openDelimiterStack.isEmpty()) {					System.out.println("case 3 : closing char must be later");					isBalanced = false;				} else {					char openDelimiter = openDelimiterStack.pop();					isBalanced = isPaired(openDelimiter, nextCharacter);					if (isBalanced == false) {						System.out.println("case 1 : not pair");					}				} // end if				break;			default:				break;			} // end switch		} // end for		if (!openDelimiterStack.isEmpty()) {			System.out.println("case 2 : not used opening char");			isBalanced = false;		}		return isBalanced;	} // end checkBalance	// Returns true if the given characters, open and close, form a pair	// of parentheses, brackets, or braces.	private static boolean isPaired(char open, char close) {		return (open == '(' && close == ')') || (open == '[' && close == ']') || (open == '{' && close == '}');	} // end isPaired	public static void main(String[] args) {		String expr1 = "({})";		System.out.println("Evaluation of " + expr1 + ": " + BalanceChecker.checkBalance(expr1));		String expr2 = "{([}]";		System.out.println("Evaluation of " + expr2 + ": " + BalanceChecker.checkBalance(expr2));	}} // end BalanceChecker