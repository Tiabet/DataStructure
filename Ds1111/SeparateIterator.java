package Ds1111;import java.util.Iterator;import java.util.NoSuchElementException;public class SeparateIterator<T> implements Iterator<T> {    private ListInterface<T> list;    private int nextPosition;  // position of entry last returned by next()    private boolean wasNextCalled; // needed by remove    public SeparateIterator(ListInterface<T> aList) {        list = aList;        nextPosition = 0;        wasNextCalled = false;    } // end constructor//  < Implementations of the methods hasNext, next, and remove go here >//  . . .    public boolean hasNext() {        return this.nextPosition < list.getLength();    } // end hasNext    public T next() {        if (this.hasNext()) {            this.wasNextCalled = true;            nextPosition++;            T ret = this.list.getEntry(nextPosition);            return ret;        } else {            throw new NoSuchElementException("No element");        }    }    public void remove() {        //throw new UnsupportedOperationException("remove() is not " +        //                                        "supported by this iterator");        if (wasNextCalled) {            list.remove(nextPosition);            nextPosition--;            wasNextCalled = false;	//reset flag        } else {            throw new IllegalStateException("Illegal call to remove(); "                    + "next() was not called.");        }    } // end remove} // end SeparateIterator